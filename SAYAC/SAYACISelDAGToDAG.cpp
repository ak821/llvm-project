//===-- SAYACISelDAGToDAG.cpp - A dag to dag inst selector for SAYAC --------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the SAYAC target.
//
//===----------------------------------------------------------------------===//

#include "SAYACTargetMachine.h"
//#include "SAYACISelLowering.h"
#include "SAYAC.h"
#include "llvm/Analysis/AliasAnalysis.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/KnownBits.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "SAYAC-isel"

namespace {

class SAYACDAGToDAGISel : public SelectionDAGISel {
  const SAYACSubtarget *Subtarget;

  const SAYACTargetMachine &getTargetMachine() const {
    return static_cast<const SAYACTargetMachine &>(TM);
  }

  //  const SAYACInstrInfo *getInstrInfo() const {
  //    return Subtarget->getInstrInfo();
  //  }

public:
  SAYACDAGToDAGISel(SAYACTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

/*
  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<SAYACSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }
*/
  // Override MachineFunctionPass.
  StringRef getPassName() const override {
    return "SAYAC DAG->DAG Pattern Instruction Selection";
  }

  bool SelectAddr(SDValue Addr, SDValue &Base);

  // Override SelectionDAGISel.
  void Select(SDNode *Node) override;
/*
bool SelectInlineAsmMemoryOperand(const SDValue &Op, unsigned ConstraintID,
                                  std::vector<SDValue> &OutOps) override;
bool IsProfitableToFold(SDValue N, SDNode *U, SDNode *Root) const override;
void PreprocessISelDAG() override;
*/

// Include the pieces autogenerated from the target description.
#include "SAYACGenDAGISel.inc"
};
} // end anonymous namespace

FunctionPass *llvm::createSAYACISelDag(SAYACTargetMachine &TM,
                                      CodeGenOpt::Level OptLevel) {
  return new SAYACDAGToDAGISel(TM, OptLevel);
}

bool SAYACDAGToDAGISel::SelectAddr(SDValue Addr, SDValue &Base) {
  if (FrameIndexSDNode *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    // EVT PtrVT = getTargetLowering()->getPointerTy(CurDAG->getDataLayout());
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i16);
    // Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
    return true;
  }
  return false;
  // if (Addr.getOpcode() == ISD::TargetExternalSymbol ||
  //     Addr.getOpcode() == ISD::TargetGlobalAddress ||
  //     Addr.getOpcode() == ISD::TargetGlobalTLSAddress) {
  //   return false; // direct calls.
  // }

  // Base = Addr;
  // Offset = CurDAG->getTargetConstant(0, Addr, MVT::i32);
  // return true;
}


void SAYACDAGToDAGISel::Select(SDNode *Node) {
  // Instruction Selection not handled by the auto-generated tablegen selection
  // should be handled here.

  SDLoc DL(Node);
  EVT VT = Node->getValueType(0);

  // Node->dump();
  switch(Node->getOpcode()) {
    default:
      break;
    case ISD::FrameIndex: {
      SDValue Imm = CurDAG->getTargetConstant(0, DL, MVT::i16);
      int FI = cast<FrameIndexSDNode>(Node)->getIndex();
      SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
      ReplaceNode(Node, CurDAG->getMachineNode(SAYAC::FI, DL, VT, TFI, Imm));
      return;
    }
  }

    // Select the default instruction.
    SelectCode(Node);

  // Node->dump();
}